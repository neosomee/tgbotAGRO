import asyncio
import math
import logging
import re
import pandas as pd
import chardet
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io
from aiogram.enums.parse_mode import ParseMode
import idna
from aiogram.types.input_file import BufferedInputFile
from db import Database
import logging
import sys

logging.basicConfig(level=logging.INFO)

if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

API_TOKEN = '7626300396:AAHxkGqY2GnarCEoxVlm9IfS-MCAfvG6fSM'
ADMIN_USERNAME = '@lprost'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

MAX_ROWS_PER_FILE = 1000

class OrderQuantity(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class UploadStates(StatesGroup):
    waiting_for_categories = State()
    waiting_for_products = State()

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    waiting_for_multiple_articles_file = State()

class MultipleArticlesStates(StatesGroup):
    waiting_for_file = State()

class OrderStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_address = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_content = State()
    waiting_for_categories = State()
    waiting_for_products = State()

db = Database()


admin_ids = [5056594883, 6521061663]

categories = []
products = []

user_carts = {}



def remove_keyboard():
    return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

def get_cart_confirmation_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"),
                KeyboardButton(text="üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏"),
            ],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_back_to_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_product_keyboard(product_id, quantity_available):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}_{quantity_available}"
        )]
    ])


def get_cart_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


def split_message(text, max_length=4096):
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:]
    parts.append(text)
    return parts

import re

def normalize_article(article) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    if not article:
        return ''
    
    article = str(article).strip().upper()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–ø–∏—Å–æ–∫)
    for char in (' ', '-', '.', '/', '\\', '_', ':', ','):
        article = article.replace(char, '')
    
    return article

def find_product_by_article(article_query: str, products: list, use_cache=True):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    norm_query = normalize_article(article_query)
    
    if use_cache:
        if not hasattr(find_product_by_article, '_cache'):
            find_product_by_article._cache = {normalize_article(p['_SKU_']): p for p in products}
        return find_product_by_article._cache.get(norm_query)
    
    return next((p for p in products if normalize_article(p['_SKU_']) == norm_query), None)

def parse_price(price_str):
    try:
        price_clean = str(price_str).replace(' ', '').replace(',', '.')
        return float(price_clean)
    except:
        return 0.0

def normalize_sku(sku: str):
    return str(sku).replace('.', '').strip()

def format_product_info(product):
    return (
        f"üõ†Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product.get('_NAME_', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üîñ *–ê—Ä—Ç–∏–∫—É–ª:* {product.get('_SKU_', '–ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞')}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {product.get('_PRICE_', '–ù–µ—Ç —Ü–µ–Ω—ã')} ‚ÇΩ\n"
        f"üì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {product.get('_QUANTITY_', '0')} —à—Ç."
    )

async def send_message_in_parts(message: types.Message, text: str, **kwargs):
    for part in split_message(text):
        await message.answer(part, **kwargs)

async def show_cart(message: types.Message):
    user_id = message.from_user.id
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π...", reply_markup=get_back_to_main_menu_keyboard())

    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=get_back_to_main_menu_keyboard())
        return

    rows = []
    total_sum = 0.0

    for product_id, item in user_carts[user_id].items():
        sku = ''
        product = next((p for p in products if str(p.get('_ID_')) == str(product_id)), None)
        if product:
            sku = product.get('_SKU_', '')
        name = item['name']
        quantity = item['quantity']
        price = item['price']
        sum_price = price * quantity
        total_sum += sum_price
        rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": sku,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
            "–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)": price,
            "–°—É–º–º–∞ (‚ÇΩ)": sum_price
        })

    df = pd.DataFrame(rows)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–ö–æ—Ä–∑–∏–Ω–∞')

    output.seek(0)

    doc = BufferedInputFile(output.read(), filename="–ö–æ—Ä–∑–∏–Ω–∞.xlsx")

    await bot.send_document(chat_id=user_id, document=doc, caption=f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞. –ò—Ç–æ–≥–æ: {total_sum:.2f} ‚ÇΩ")

    await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_cart_keyboard())

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç)
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    original_url = "https://–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ/image/catalog/logoagro3.png"
    punycode_domain = idna.encode("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ").decode()
    photo_url = original_url.replace("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ", punycode_domain)

    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç.\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ *üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞* - –≤–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n"
        "2Ô∏è‚É£ *üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏* - –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∏ —è —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
        "3Ô∏è‚É£ *üõí –ö–æ—Ä–∑–∏–Ω–∞* - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.\n"
        "4Ô∏è‚É£ *üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π* - –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
        "üîπ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —É —Ç–µ–±—è –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ *üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—é–¥–∞.\n"
        "üîπ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\" –∏ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
        "üîπ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõçÔ∏è"
    )

    await message.answer_photo(
        photo=photo_url,
        caption=caption,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

def get_support_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                url="https://t.me/lprost"  
            )
        ]
    ])

@dp.message(F.text == "üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message):
    text = (
        "üìû *–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:* –ù–∏–∫–æ–ª–∞–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n"
        "üìß *–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:* hourtone@gmail.com\n"
        "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 999 123-45-67\n\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ"
    )
    await send_message_in_parts(
        message,
        text,
        parse_mode="Markdown",
        reply_markup=get_support_inline_keyboard()
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")],
            [KeyboardButton(text="üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer(
            "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", 
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.message(F.text == "üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.clear()
        await message.answer(
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await message.answer(
        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...",
        reply_markup=remove_keyboard()  
    )
    await state.set_state(AdminStates.waiting_for_broadcast_content)

@dp.message(AdminStates.waiting_for_broadcast_content)
async def process_broadcast_content(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        await state.clear()
        return

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    users = await db.get_all_users()
    success_count = 0
    fail_count = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    if message.photo:
        photo = message.photo[-1].file_id
        caption = message.caption or ""
        send_func = bot.send_photo
        send_kwargs = {"photo": photo, "caption": caption}
    elif message.video:
        video = message.video.file_id
        caption = message.caption or ""
        send_func = bot.send_video
        send_kwargs = {"video": video, "caption": caption}
    elif message.text:
        send_func = bot.send_message
        send_kwargs = {"text": message.text}
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        await state.clear()
        return

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async def send_to_user(user_id):
        nonlocal success_count, fail_count
        try:
            await send_func(chat_id=user_id, **send_kwargs)
            success_count += 1
            await asyncio.sleep(0.05)  # –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    tasks = [send_to_user(user_id) for user_id, _ in users]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(*tasks)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
        reply_markup=get_admin_keyboard()
    )
    await state.set_state(None)



@dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def load_categories(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer(
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
            reply_markup=get_admin_keyboard()
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UploadStates –≤–º–µ—Å—Ç–æ AdminStates
        await state.set_state(UploadStates.waiting_for_categories)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(F.text == "üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
async def load_products(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(UploadStates.waiting_for_products)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())
        return

    users = await db.get_all_users()
    users_count = len(users)

    await message.answer(
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n"
        f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}",
        reply_markup=get_admin_keyboard()
    )


@dp.message(UploadStates.waiting_for_categories, F.document)
async def process_categories_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global categories
        categories = df.to_dict('records')

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(UploadStates.waiting_for_products, F.document)
async def process_products_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global products
        products = df.to_dict('records')

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤",reply_markup=get_admin_keyboard())
        await state.set_state(None)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}", reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞")
async def start_single_article(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(UserStates.waiting_for_article_request)

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    article_requested_once = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

@dp.message(UserStates.waiting_for_article_request)
async def handle_article_request(message: types.Message, state: FSMContext):
    text = message.text.strip()

    # –°–ø–µ—Ü–∫–æ–º–∞–Ω–¥—ã
    if text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        return

    if text == "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É":
        await handle_cart_button(message)
        return

    if text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        user_id = message.from_user.id
        if user_id in user_carts:
            user_carts[user_id].clear()
            await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())
        else:
            await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return
    
    if text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—ç–Ω–¥–ª–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        await checkout(message, state)
        return

    # –î–∞–ª—å—à–µ - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    raw_query = text
    norm_query = normalize_article(raw_query)
    
    product = next((p for p in products if normalize_article(p.get('_SKU_', '')) == norm_query), None)

    if product:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        product_url = product.get('_URL_')
        photo_sent = False
        
        if product_url:
            try:
                response = requests.get(product_url, timeout=10)
                response.raise_for_status()
                soup = BeautifulSoup(response.content, 'html.parser')
                
                img_tag = (soup.select_one('.product-image img') or 
                          soup.select_one('.product-page img') or
                          next((tag for tag in soup.find_all('img') 
                              if norm_query in normalize_article(tag.get('src', ''))), None))
                
                if img_tag and img_tag.get('src'):
                    img_url = img_tag['src']
                    if not img_url.startswith('http'):
                        img_url = urljoin(product_url, img_url)
                    
                    await message.answer_photo(
                        photo=img_url,
                        caption=f"üñº {product.get('_NAME_', '')}"
                    )
                    photo_sent = True
            except Exception as e:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        text = format_product_info(product)
        quantity = int(product.get('_QUANTITY_', 0))
        product_id = product.get('_ID_')
        
        await send_message_in_parts(
            message,
            text,
            reply_markup=get_product_keyboard(product_id, quantity),
            parse_mode='Markdown'
        )
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª
        await message.answer(
            "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
            reply_markup=get_back_to_main_menu_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –¢–æ–≤–∞—Ä '{raw_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª",
            reply_markup=get_cart_keyboard()
        )

  
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product_id, quantity_available_str = parts[1], parts[2]
    try:
        quantity_available = int(quantity_available_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    product = next((p for p in products if str(p['_ID_']) == product_id), None)
    if product:
        price = parse_price(product.get('_PRICE_', '0'))
        product_data = {
            'product_id': product_id,
            'quantity_available': quantity_available,
            'price': price,
            'name': product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        }
        await state.update_data(**product_data)
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å. {quantity_available} —à—Ç.):", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(OrderQuantity.waiting_for_quantity)
    else:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderQuantity.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')
    quantity_available = data.get('quantity_available')
    price = data.get('price')
    name = data.get('name')

    if product_id is None or quantity_available is None or price is None or name is None:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", 
                           reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
        return

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", 
                           reply_markup=get_back_to_main_menu_keyboard())
        return

    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {quantity_available}:",
                           reply_markup=get_back_to_main_menu_keyboard())
        return

    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}

    user_carts[user_id][product_id] = {
        'quantity': quantity,
        'price': price,
        'name': name
    }

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É/–º–µ–Ω—é
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=get_cart_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
    await state.set_state(UserStates.waiting_for_article_request)


@dp.message(F.text == "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
async def handle_cart_button(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", 
                           reply_markup=get_main_menu_keyboard())
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for product_id, item in user_carts[user_id].items():
        product_total = item['quantity'] * item['price']
        cart_text += f"‚ñ™ {item['name']}\n"
        cart_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} √ó {item['price']} ‚ÇΩ = {product_total} ‚ÇΩ\n\n"
        total += product_total
    
    cart_text += f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    
    await message.answer(
        cart_text,
        reply_markup=get_main_menu_keyboard()  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    )

@dp.message(F.text == "üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")
async def start_multiple_articles(message: types.Message, state: FSMContext):
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.\n\n"
        "–§–æ—Ä–º–∞—Ç: –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –∞—Ä—Ç–∏–∫—É–ª, –≤–æ –≤—Ç–æ—Ä–æ–º - –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤ —Ç—Ä–µ—Ç—å–µ–º - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
        reply_markup=get_back_to_main_menu_keyboard()
    )
    await state.set_state(MultipleArticlesStates.waiting_for_file)

MAX_ROWS_PER_FILE = 1000

@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É...", reply_markup=get_back_to_main_menu_keyboard())

    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)

        if df.shape[1] < 3:
            await message.answer("‚ùó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
            return

        rows = []
        total_sum = 0.0
        total_added_quantity = 0

        if user_id not in user_carts:
            user_carts[user_id] = {}

        for index, row in df.iterrows():
            try:
                sku = normalize_sku(str(row[0]))
                file_name = str(row[1]).strip() if not pd.isna(row[1]) else ''
                quantity_str = str(row[2]).strip()

                if not sku or not quantity_str.isdigit():
                    continue

                quantity = int(quantity_str)

                product = next((p for p in products if normalize_sku(p.get('_SKU_', '')) == sku), None)
                if product:
                    product_id = product.get('_ID_')
                    price = parse_price(product.get('_PRICE_', '0'))
                    available = int(product.get('_QUANTITY_', 0))
                    name = file_name if file_name else product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                    quantity_to_add = min(quantity, available)

                    if product_id in user_carts[user_id]:
                        user_carts[user_id][product_id]['quantity'] += quantity_to_add
                    else:
                        user_carts[user_id][product_id] = {
                            'quantity': quantity_to_add,
                            'price': price,
                            'name': name
                        }

                    sum_price = price * quantity_to_add
                    total_sum += sum_price
                    total_added_quantity += quantity_to_add

                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": quantity_to_add,
                        "–¶–µ–Ω–∞": price,
                        "–î–æ—Å—Ç—É–ø–Ω–æ": available,
                        "–°—É–º–º–∞": sum_price,
                        "–°—Ç–∞—Ç—É—Å": "–î–æ–±–∞–≤–ª–µ–Ω–æ"
                    })
                else:
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": file_name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": 0,
                        "–¶–µ–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–î–æ—Å—Ç—É–ø–Ω–æ": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–°—É–º–º–∞": 0,
                        "–°—Ç–∞—Ç—É—Å": "–ù–µ –Ω–∞–π–¥–µ–Ω"
                    })

            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏")

        if not rows:
            await message.answer("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ –±–∞–∑—ã.", reply_markup=get_back_to_main_menu_keyboard())
            await state.clear()
            return

        df_result = pd.DataFrame(rows)
        num_files = math.ceil(len(df_result) / MAX_ROWS_PER_FILE)

        for i in range(num_files):
            start = i * MAX_ROWS_PER_FILE
            end = min((i + 1) * MAX_ROWS_PER_FILE, len(df_result))
            part_df = df_result.iloc[start:end]

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                part_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:D', 18)
                worksheet.set_column('E:G', 15)
                worksheet.set_column('H:H', 15)

            output.seek(0)
            filename = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_—á–∞—Å—Ç—å_{i+1}.xlsx"
            doc = BufferedInputFile(output.read(), filename=filename)
            await bot.send_document(chat_id=user_id, document=doc, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—á–∞—Å—Ç—å {i+1}/{num_files})", reply_markup=get_back_to_main_menu_keyboard())

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_added_quantity} –Ω–∞ —Å—É–º–º—É {total_sum:.2f} ‚ÇΩ", reply_markup=get_back_to_main_menu_keyboard())
        await show_cart(message)  # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_carts and user_carts[user_id]:
        cart_items = user_carts[user_id]

        await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π‚Ä¶")

        data = []
        total_sum = 0.0
        for product_id, product_info in cart_items.items():
            row = {
                "–ê—Ä—Ç–∏–∫—É–ª": product_id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": product_info['name'],
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": product_info['quantity'],
                "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": product_info['price'],
                "–°—É–º–º–∞": product_info['price'] * product_info['quantity']
            }
            total_sum += row["–°—É–º–º–∞"]
            data.append(row)

        df = pd.DataFrame(data)

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='–ö–æ—Ä–∑–∏–Ω–∞', index=False)
            writer.close()
        output.seek(0)

        await bot.send_document(
            chat_id=message.chat.id,
            document=types.BufferedInputFile(output.read(), filename="–ö–æ—Ä–∑–∏–Ω–∞.xlsx"),
            caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –≤ —Ñ–∞–π–ª–µ"
        )

        await message.answer(f"üõí –ò—Ç–æ–≥–æ: {total_sum:.2f} ‚ÇΩ", reply_markup=get_cart_keyboard())
    else:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@dp.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_carts:
        user_carts[user_id].clear()
    await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.", reply_markup=get_main_menu_keyboard())
        return
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=get_main_menu_keyboard())
    await state.set_state(OrderStates.waiting_for_contact)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(OrderStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    if len(contact) < 5:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    await state.update_data(contact=contact)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    data = await state.get_data()
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")
    user_id = message.from_user.id

    cart_items = user_carts.get(user_id, {})
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    total_sum = sum(item['price'] * item['quantity'] for item in cart_items.values())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    order_summary = (
        f"‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {contact}\n"
        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n\n"
        f"üí∞ *–ò—Ç–æ–≥–æ:* {total_sum:.2f} ‚ÇΩ\n\n"
        "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
    )
    await message.answer(order_summary, parse_mode="Markdown", reply_markup=get_main_menu_keyboard())

    # –§–æ—Ä–º–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º
    data = []
    for product_id, product_info in cart_items.items():
        data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": product_info['name'],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": product_info['quantity'],
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": product_info['price'],
            "–°—É–º–º–∞": product_info['price'] * product_info['quantity']
        })
    df = pd.DataFrame(data)
    total_row = pd.DataFrame([{
        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò—Ç–æ–≥–æ",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "",
        "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": "",
        "–°—É–º–º–∞": total_sum
    }])
    df = pd.concat([df, total_row], ignore_index=True)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑', index=False)
        writer.close()
    output.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º
    await bot.send_document(
        chat_id=message.chat.id,
        document=types.BufferedInputFile(output.read(), filename="–ó–∞–∫–∞–∑.xlsx")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    manager_username = "lprost"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π username
    contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                url=f"https://t.me/{manager_username}"
            )
        ]
    ])
    await message.answer(
        "üì¢ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        reply_markup=contact_keyboard
    )

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_carts[user_id].clear()
    await state.clear()



async def main():
    logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    await db.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot, skip_updates=True)
    except asyncio.CancelledError:
        logging.info("Polling –æ—Ç–º–µ–Ω—ë–Ω")
    finally:
        logging.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        await bot.session.close()
        await db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
