import asyncio
import logging
import re
import pandas as pd
import chardet
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io

API_TOKEN = '7834135496:AAFqhUG_mbgV_03-bmxzJGaNxQUgaQ1Olak'
ADMIN_USERNAME = '@lprost'  

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class OrderQuantity(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class UploadStates(StatesGroup):
    waiting_for_categories = State()
    waiting_for_products = State()

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    waiting_for_multiple_articles_file = State()

class MultipleArticlesStates(StatesGroup):
    waiting_for_file = State()

admin_ids = [6521061663]  

categories = []
products = []

user_carts = {}  

def parse_price(price_str):
    try:
        price_clean = str(price_str).replace(' ', '').replace(',', '.')
        return float(price_clean)
    except:
        return 0.0

def normalize_sku(sku: str):
    return str(sku).replace('.', '').strip()

def format_product_info(product):
    return (
        f"üõ†Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product.get('_NAME_', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üîñ *–ê—Ä—Ç–∏–∫—É–ª:* {product.get('_SKU_', '–ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞')}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {product.get('_PRICE_', '–ù–µ—Ç —Ü–µ–Ω—ã')} ‚ÇΩ\n"
        f"üì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {product.get('_QUANTITY_', '0')} —à—Ç."
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"),
                KeyboardButton(text="üìã –ó–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"),
            ],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_back_to_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_product_keyboard(product_id, quantity_available):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}_{quantity_available}"
        )]
    ])

def get_cart_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def split_message(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:]
    parts.append(text)
    return parts

async def send_message_in_parts(message: types.Message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram."""
    for part in split_message(text):
        await message.answer(part, **kwargs)
    
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç.\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ *üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞* ‚Äî –≤–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n"
        "2Ô∏è‚É£ *üìã –ó–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤* ‚Äî –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∏ —è —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
        "3Ô∏è‚É£ *üõí –ö–æ—Ä–∑–∏–Ω–∞* ‚Äî –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.\n"
        "4Ô∏è‚É£ *üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π* ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
        "üîπ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —É —Ç–µ–±—è –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ *üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—é–¥–∞.\n"
        "üîπ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\" –∏ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
        "üîπ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõçÔ∏è"
    )
    await send_message_in_parts(message, text, parse_mode="Markdown", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message):
    text = (
        "üìû *–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:* –ù–∏–∫–æ–ª–∞–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n"
        "üìß *–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:* hourtone@gmail.com\n"
        "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 999 123-45-67"
    )
    await send_message_in_parts(message, text, parse_mode="Markdown", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in admin_ids:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
                [KeyboardButton(text="üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
        await message.answer("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def load_categories(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(UploadStates.waiting_for_categories)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
async def load_products(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(UploadStates.waiting_for_products)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id in admin_ids:
        await message.answer(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\nüìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}", reply_markup=get_back_to_main_menu_keyboard())
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(UploadStates.waiting_for_categories, F.document)
async def process_categories_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global categories
        categories = df.to_dict('records')

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()

@dp.message(UploadStates.waiting_for_products, F.document)
async def process_products_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global products
        products = df.to_dict('records')

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()

@dp.message(F.text == "üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞")
async def start_single_article(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(UserStates.waiting_for_article_request)

@dp.message(UserStates.waiting_for_article_request)
async def handle_article_request(message: types.Message, state: FSMContext):
    raw_query = message.text.strip()
    query_no_dots = raw_query.replace('.', '')

    product = next(
        (p for p in products if normalize_sku(p.get('_SKU_', '')) in [raw_query, query_no_dots]),
        None
    )

    if product:
        text = format_product_info(product)
        quantity_available = int(product.get('_QUANTITY_', 0))
        product_id = product.get('_ID_')
        await send_message_in_parts(message, text, reply_markup=get_product_keyboard(product_id, quantity_available), parse_mode='Markdown')

        product_url = product.get('_URL_')
        if product_url:
            try:
                response = requests.get(product_url)
                response.raise_for_status()
                soup = BeautifulSoup(response.content, 'html.parser')

                img_tag = soup.select_one('.product-image img') or soup.select_one('.product-page img')

                if not img_tag:
                    img_tags = soup.find_all('img')
                    for tag in img_tags:
                        src = tag.get('src', '')
                        if query_no_dots in src or 'product' in src.lower():
                            img_tag = tag
                            break

                if img_tag and img_tag.get('src'):
                    img_url = img_tag['src']
                    if not img_url.startswith('http'):
                        img_url = urljoin(product_url, img_url)

                    caption = f"üñº –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:\n{product.get('_NAME_', '')}\nüîñ –ê—Ä—Ç–∏–∫—É–ª: {product.get('_SKU_', '')}"
                    await message.answer_photo(photo=img_url, caption=caption, reply_markup=get_back_to_main_menu_keyboard())
                else:
                    await message.answer("‚ö†Ô∏è –§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", reply_markup=get_back_to_main_menu_keyboard())
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)[:50]}", reply_markup=get_back_to_main_menu_keyboard())
        else:
            await message.answer("‚ö†Ô∏è URL —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_back_to_main_menu_keyboard())
    else:
        await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{raw_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_to_main_menu_keyboard())

    await state.clear()

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product_id, quantity_available_str = parts[1], parts[2]
    try:
        quantity_available = int(quantity_available_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    product = next((p for p in products if str(p['_ID_']) == product_id), None)
    if product:
        price = parse_price(product.get('_PRICE_', '0'))
        product_data = {
            'product_id': product_id,
            'quantity_available': quantity_available,
            'price': price,
            'name': product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        }
        await state.update_data(**product_data)
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å. {quantity_available} —à—Ç.):", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(OrderQuantity.waiting_for_quantity)
    else:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderQuantity.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')
    quantity_available = data.get('quantity_available')
    price = data.get('price')
    name = data.get('name')

    if product_id is None or quantity_available is None or price is None or name is None:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
        return

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_back_to_main_menu_keyboard())
        return

    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {quantity_available}:", reply_markup=get_back_to_main_menu_keyboard())
        return

    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}

    user_carts[user_id][product_id] = {
        'quantity': quantity,
        'price': price,
        'name': name
    }

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=get_back_to_main_menu_keyboard())

    await state.clear()

@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
async def start_multiple_articles(message: types.Message, state: FSMContext):
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.\n\n"
                         "–§–æ—Ä–º–∞—Ç: –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –∞—Ä—Ç–∏–∫—É–ª, –≤–æ –≤—Ç–æ—Ä–æ–º ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(MultipleArticlesStates.waiting_for_file)

@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    try:
        if not message.document.file_name.lower().endswith(('.xlsx', '.xls')):
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).", reply_markup=get_back_to_main_menu_keyboard())
            return

        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)

        if df.shape[1] < 3:
            await message.answer("‚ùó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
            return

        user_id = message.from_user.id
        if user_id not in user_carts:
            user_carts[user_id] = {}

        added_items = []
        total_added = 0
        total_price = 0.0

        for index, row in df.iterrows():
            try:
                sku = normalize_sku(str(row[0]))
                file_name = str(row[1])
                quantity = int(row[2])

                product = next((p for p in products if normalize_sku(p.get('_SKU_', '')) == sku), None)
                if product:
                    price = parse_price(product.get('_PRICE_', '0'))
                    product_id = product.get('_ID_')
                    quantity_available = int(product.get('_QUANTITY_', 0))
                    add_qty = min(quantity, quantity_available)
                    if add_qty > 0:
                        user_carts[user_id][product_id] = {
                            'quantity': add_qty,
                            'price': price,
                            'name': product.get('_NAME_', file_name)
                        }
                        added_items.append(
                            f"‚úÖ {file_name} (–∞—Ä—Ç–∏–∫—É–ª: {sku}) ‚Äî {add_qty} —à—Ç. –ø–æ {price} ‚ÇΩ"
                        )
                        total_added += add_qty
                        total_price += add_qty * price
                    else:
                        added_items.append(
                            f"‚ö†Ô∏è {file_name} (–∞—Ä—Ç–∏–∫—É–ª: {sku}) ‚Äî –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                        )
                else:
                    added_items.append(
                        f"‚ùå {file_name} (–∞—Ä—Ç–∏–∫—É–ª: {sku}) ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
            except Exception as e:
                added_items.append(
                    f"‚ùó –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index+2}: {e}"
                )

        summary_text = (
            "üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:*\n\n" +
            "\n".join(added_items) +
            f"\n\n–ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_added} —à—Ç. –Ω–∞ —Å—É–º–º—É {total_price:.2f} ‚ÇΩ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram
        await send_message_in_parts(message, summary_text, parse_mode="Markdown", reply_markup=get_back_to_main_menu_keyboard())

        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
    
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_handler(message: types.Message):
    await show_cart(message)

async def show_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_to_main_menu_keyboard())
        return

    cart = user_carts[user_id]
    total_price = 0.0
    cart_text_lines = ["üõí *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã:*\n"]

    for product_id, item in cart.items():
        name = item['name']
        quantity = item['quantity']
        price = item['price']
        item_price = quantity * price
        total_price += item_price
        cart_text_lines.append(f"‚Ä¢ {name} ‚Äî {quantity} —à—Ç. –ø–æ {price:.2f} ‚ÇΩ = {item_price:.2f} ‚ÇΩ")

    cart_text_lines.append(f"\nüí∞ *–ò—Ç–æ–≥–æ:* {total_price:.2f} ‚ÇΩ")
    cart_text = "\n".join(cart_text_lines)
    kb = get_cart_keyboard()
    await send_message_in_parts(message, cart_text, reply_markup=kb, parse_mode="Markdown")

@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_carts:
        user_carts[user_id] = {}
    await message.answer("üóëÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=get_back_to_main_menu_keyboard())
        return

    await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(OrderQuantity.waiting_for_contact)

@dp.message(OrderQuantity.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.text
    await state.update_data(contact=contact)
    await message.answer("üöö –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(OrderQuantity.waiting_for_address)

@dp.message(OrderQuantity.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text
    user_data = await state.get_data()
    contact = user_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')

    user_id = message.from_user.id
    cart = user_carts[user_id]
    total_price = 0.0
    order_details = []

    for product_id, item in cart.items():
        name = item['name']
        quantity = item['quantity']
        price = item['price']
        item_price = quantity * price
        total_price += item_price
        order_details.append(f"‚Ä¢ {name} ‚Äî {quantity} —à—Ç. –ø–æ {price:.2f} ‚ÇΩ = {item_price:.2f} ‚ÇΩ")

    order_summary = "\n".join(order_details)
    order_text = (
        "üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n\n"
        f"{order_summary}\n\n"
        f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* {total_price:.2f} ‚ÇΩ\n\n"
        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:* {contact}\n"
        f"üöö *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {address}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.id})"
    )

    for admin_id in admin_ids:
        try:
            for part in split_message(order_text):
                await bot.send_message(admin_id, part, parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", reply_markup=get_back_to_main_menu_keyboard())
            await state.clear()
            return

    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {ADMIN_USERNAME}", reply_markup=get_back_to_main_menu_keyboard())
    user_carts[user_id] = {}
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
