import asyncio
import math
import logging
import re
import pandas as pd
import chardet
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io
from aiogram.enums.parse_mode import ParseMode
import idna
from aiogram.types.input_file import BufferedInputFile
from db import Database
import logging
import sys
from datetime import datetime
from aiogram.utils.markdown import html_decoration as hd 
import unicodedata
import aiohttp

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
)

if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

API_TOKEN = '7626300396:AAHxkGqY2GnarCEoxVlm9IfS-MCAfvG6fSM'
ADMIN_USERNAME = '@lprost'
ORDER_CHANNEL = -1002310332672

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

MAX_ROWS_PER_FILE = 50

class OrderQuantity(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class UploadStates(StatesGroup):
    waiting_for_categories = State()
    waiting_for_products = State()

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    article_requested_once = State()
    waiting_for_multiple_articles_file = State()
    

class MultipleArticlesStates(StatesGroup):
    waiting_for_file = State()

class OrderStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_address = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_content = State()
    waiting_for_categories = State()
    waiting_for_products = State()

db = Database()


admin_ids = [5056594883, 6521061663]

categories = []
products = []
products_by_id = {}
categories_dict = {}

user_carts = {}

BASE_URL = "https://xn--80aaijtwglegf.xn--p1ai/"


def remove_keyboard():
    return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

def get_cart_confirmation_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"),
                KeyboardButton(text="üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏"),
            ],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_back_to_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_product_keyboard(product_id, quantity_available):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}_{quantity_available}"
        )]
    ])


def get_cart_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


async def shorten_url(long_url: str) -> str:
    if not long_url:
        return ''
    api_url = f"http://tinyurl.com/api-create.php?url={long_url}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as resp:
                if resp.status == 200:
                    short_url = await resp.text()
                    if short_url.startswith('http'):
                        return short_url
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ {long_url}: {e}")
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    return long_url


def split_message(text, max_length=4096):
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:]
    parts.append(text)
    return parts


SIMILAR_CHARS_MAP = {
    '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H',
    '–û': 'O', '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X',
    '–∞': 'A', '–≤': 'B', '–µ': 'E', '–∫': 'K', '–º': 'M', '–Ω': 'H',
    '–æ': 'O', '—Ä': 'P', '—Å': 'C', '—Ç': 'T', '—É': 'Y', '—Ö': 'X',
}

def normalize_article(article) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞:
    - –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ
    - Unicode –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    - –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    - –ó–∞–º–µ–Ω–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    """
    if not article:
        return ''
    article = str(article)
    article = unicodedata.normalize('NFKC', article)
    article = article.upper()
    article = ''.join(SIMILAR_CHARS_MAP.get(ch, ch) for ch in article)
    article = re.sub(r'[^A-Z0-9]', '', article)
    return article

def get_product_image_url(product: dict) -> str | None:
    img = product.get('_IMAGE_') or ''
    if img:
        img = img.strip()
        if img.startswith('http'):
            return img
        else:
            return urljoin(BASE_URL, img)
    # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∏–∑ _IMAGES_ –∏–ª–∏ _PRODUCT_IMAGES_
    for field in ['_IMAGES_', '_PRODUCT_IMAGES_']:
        imgs = product.get(field)
        if imgs:
            first_img = imgs.split(';')[0].strip()
            if first_img:
                if first_img.startswith('http'):
                    return first_img
                else:
                    return urljoin(BASE_URL, first_img)
    return None

async def get_image_url_from_product_page(url: str) -> str | None:
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        # –ü—Ä–∏–º–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–π —Å–∞–π—Ç
        img_tag = soup.select_one('.product-image img') or soup.select_one('.product-page img')
        if img_tag and img_tag.get('src'):
            img_url = img_tag['src']
            if not img_url.startswith('http'):
                img_url = urljoin(url, img_url)
            return img_url
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ç–æ —Å —Å–∞–π—Ç–∞ {url}: {e}")
    return None

def find_product_by_article(article_query: str, products: list, use_cache=True):
    norm_query = normalize_article(article_query)
    if use_cache:
        if not hasattr(find_product_by_article, '_cache'):
            find_product_by_article._cache = {}
            for p in products:
                norm_sku = normalize_article(p.get('_SKU_', ''))
                norm_name = normalize_article(p.get('_NAME_', ''))
                # –ö—ç—à–∏—Ä—É–µ–º –ø–æ –æ–±–æ–∏–º –∫–ª—é—á–∞–º
                find_product_by_article._cache[norm_sku] = p
                find_product_by_article._cache[norm_name] = p
        return find_product_by_article._cache.get(norm_query)
    else:
        return next(
            (p for p in products if normalize_article(p.get('_SKU_', '')) == norm_query or normalize_article(p.get('_NAME_', '')) == norm_query),
            None
        )



def clear_find_product_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å."""
    if hasattr(find_product_by_article, '_cache'):
        del find_product_by_article._cache

def parse_price(price_str):
    try:
        price_clean = str(price_str).replace(' ', '').replace(',', '.')
        return float(price_clean)
    except:
        return 0.0

def normalize_sku(sku: str):
    return str(sku).replace('.', '').strip()

def format_product_info(product, sku=None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ sku –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë—Ç –∏–∑ product['_SKU_'].
    """
    if sku is None:
        sku = product.get('_SKU_', '')
    # –ó–∞—â–∏—Ç–∞ –æ—Ç nan (–µ—Å–ª–∏ sku - float nan)
    if isinstance(sku, float) and str(sku).lower() == 'nan':
        sku = ''

    name = product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    price = product.get('_PRICE_', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    quantity = product.get('_QUANTITY_', 0)
    stock_status = product.get('_STOCK_STATUS_', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ä—É–±–ª—ë–º, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        price_str = f"{float(price):.2f} ‚ÇΩ"
    except (ValueError, TypeError):
        price_str = str(price)

    text = (
        f"üõ†Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n"
        f"üîñ *–ê—Ä—Ç–∏–∫—É–ª:* {sku}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {price_str}\n"
        f"üì¶ *–í –Ω–∞–ª–∏—á–∏–∏:* {quantity} —à—Ç.\n"
    )
    return text


async def send_message_in_parts(message: types.Message, text: str, **kwargs):
    for part in split_message(text):
        await message.answer(part, **kwargs)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç)
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    original_url = "https://–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ/image/catalog/logoagro3.png"
    punycode_domain = idna.encode("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ").decode()
    photo_url = original_url.replace("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ", punycode_domain)

    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç.\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ *üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞* - –≤–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n"
        "2Ô∏è‚É£ *üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏* - –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∏ —è —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
        "3Ô∏è‚É£ *üõí –ö–æ—Ä–∑–∏–Ω–∞* - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.\n"
        "4Ô∏è‚É£ *üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π* - –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
        "üîπ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —É —Ç–µ–±—è –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ *üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—é–¥–∞.\n"
        "üîπ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\" –∏ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
        "üîπ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõçÔ∏è"
    )

    await message.answer_photo(
        photo=photo_url,
        caption=caption,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

def get_support_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                url="https://t.me/lprost"  
            )
        ]
    ])

@dp.message(F.text == "üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message):
    text = (
        "üìû *–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:* –ù–∏–∫–æ–ª–∞–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä\n"
        "üìß *–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:* hourtone@gmail.com\n"
        "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 999 123-45-67\n\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ"
    )
    await send_message_in_parts(
        message,
        text,
        parse_mode="Markdown",
        reply_markup=get_support_inline_keyboard()
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")],
            [KeyboardButton(text="üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer(
            "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", 
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.message(F.text == "üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await state.clear()
        await message.answer(
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    await message.answer(
        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...",
        reply_markup=remove_keyboard()  
    )
    await state.set_state(AdminStates.waiting_for_broadcast_content)

@dp.message(AdminStates.waiting_for_broadcast_content)
async def process_broadcast_content(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        await state.clear()
        return

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    users = await db.get_all_users()
    success_count = 0
    fail_count = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    if message.photo:
        photo = message.photo[-1].file_id
        caption = message.caption or ""
        send_func = bot.send_photo
        send_kwargs = {"photo": photo, "caption": caption}
    elif message.video:
        video = message.video.file_id
        caption = message.caption or ""
        send_func = bot.send_video
        send_kwargs = {"video": video, "caption": caption}
    elif message.text:
        send_func = bot.send_message
        send_kwargs = {"text": message.text}
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        await state.clear()
        return

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async def send_to_user(user_id):
        nonlocal success_count, fail_count
        try:
            await send_func(chat_id=user_id, **send_kwargs)
            success_count += 1
            await asyncio.sleep(0.05)  # –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    tasks = [send_to_user(user_id) for user_id, _ in users]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(*tasks)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
        reply_markup=get_admin_keyboard()
    )
    await state.set_state(None)



@dp.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def load_categories(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer(
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
            reply_markup=get_admin_keyboard()
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UploadStates –≤–º–µ—Å—Ç–æ AdminStates
        await state.set_state(UploadStates.waiting_for_categories)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(F.text == "üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
async def load_products(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(UploadStates.waiting_for_products)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())
        return

    users = await db.get_all_users()
    users_count = len(users)

    await message.answer(
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n"
        f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}",
        reply_markup=get_admin_keyboard()
    )


@dp.message(UploadStates.waiting_for_categories, F.document)
async def process_categories_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        # –ß–∏—Ç–∞–µ–º CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ';'
        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)

        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
        df.columns = df.columns.str.strip('"').str.strip()

        logging.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ CSV –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {df.columns.tolist()}")
        logging.info(f"–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:\n{df.head()}")

        categories = df.to_dict('records')

        global categories_dict
        categories_dict = {
            str(item['_ID_']): item['_NAME_']
            for item in categories if '_ID_' in item and '_NAME_' in item
        }

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories_dict)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=get_admin_keyboard())
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}", reply_markup=get_admin_keyboard())
        await state.clear()




@dp.message(UploadStates.waiting_for_products, F.document)
async def process_products_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global products, products_by_sku, products_by_id
        products = df.to_dict('records')
        products_by_sku = {normalize_sku(item.get('SKU_')): item for item in products if item.get('SKU_')}
        products_by_id = {str(item.get('_ID_')): item for item in products if item.get('_ID_')}

        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}", reply_markup=get_admin_keyboard())
        await state.clear()


@dp.message(F.text == "üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞")
async def start_single_article(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(UserStates.waiting_for_article_request)

async def get_image_url_from_product_page(url: str) -> str | None:
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ <img> —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –∏–ª–∏ id
        img_tag = soup.find('img', class_='product-image')  # –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–π —Å–∞–π—Ç
        if img_tag and img_tag.get('src'):
            img_url = img_tag['src']
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–æ–ø–æ–ª–Ω–∏ –µ—ë
            if not img_url.startswith('http'):
                from urllib.parse import urljoin
                img_url = urljoin(url, img_url)
            return img_url
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å {url}: {e}")
    return None

async def get_image_url_from_product_page_async(url: str) -> str | None:
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, get_image_url_from_product_page, url)  


@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É...", reply_markup=get_back_to_main_menu_keyboard())

    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)

        if df.shape[1] < 3:
            await message.answer("‚ùó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
            return

        rows = []
        total_sum = 0.0
        total_added_quantity = 0

        if user_id not in user_carts:
            user_carts[user_id] = {}

        for _, row in df.iterrows():
            try:
                sku = normalize_sku(str(row.iloc[0]))
                file_name = str(row.iloc[1]).strip() if not pd.isna(row.iloc[1]) else ''
                quantity_str = str(row.iloc[2]).strip()

                if not sku or not quantity_str.isdigit():
                    continue

                quantity = int(quantity_str)

                product = next((p for p in products if normalize_sku(p.get('_SKU_', '')) == sku), None)
                if product:
                    product_id = str(product.get('_ID_'))
                    price = parse_price(product.get('_PRICE_', '0'))
                    available = int(product.get('_QUANTITY_', 0))
                    name = file_name if file_name else product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                    quantity_to_add = min(quantity, available)

                    if product_id in user_carts[user_id]:
                        user_carts[user_id][product_id]['quantity'] += quantity_to_add
                    else:
                        user_carts[user_id][product_id] = {
                            'quantity': quantity_to_add,
                            'price': price,
                            'name': name
                        }

                    sum_price = price * quantity_to_add
                    total_sum += sum_price
                    total_added_quantity += quantity_to_add

                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": quantity_to_add,
                        "–¶–µ–Ω–∞": price,
                        "–î–æ—Å—Ç—É–ø–Ω–æ": available,
                        "–°—É–º–º–∞": sum_price,
                        "–°—Ç–∞—Ç—É—Å": "–î–æ–±–∞–≤–ª–µ–Ω–æ"
                    })
                else:
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": file_name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": 0,
                        "–¶–µ–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–î–æ—Å—Ç—É–ø–Ω–æ": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–°—É–º–º–∞": 0,
                        "–°—Ç–∞—Ç—É—Å": "–ù–µ –Ω–∞–π–¥–µ–Ω"
                    })

            except Exception:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏")

        if not rows:
            await message.answer("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ –±–∞–∑—ã.", reply_markup=get_back_to_main_menu_keyboard())
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º Excel —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        df_result = pd.DataFrame(rows)
        total_rows = len(df_result)
        num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
        logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {total_rows}, –ª–∏—Å—Ç–æ–≤ –±—É–¥–µ—Ç: {num_sheets}")

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            for i in range(num_sheets):
                start = i * MAX_ROWS_PER_FILE
                end = min(start + MAX_ROWS_PER_FILE, total_rows)
                part_df = df_result.iloc[start:end]
                sheet_name = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{i+1}'
                part_df.to_excel(writer, index=False, sheet_name=sheet_name)
                worksheet = writer.sheets[sheet_name]
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:D', 18)
                worksheet.set_column('E:G', 15)
                worksheet.set_column('H:H', 15)

        output.seek(0)
        filename = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_–≤_–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö_–ª–∏—Å—Ç–∞—Ö.xlsx"
        doc = BufferedInputFile(output.read(), filename=filename)
        await bot.send_document(chat_id=user_id, document=doc, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({num_sheets} –ª–∏—Å—Ç–æ–≤)", reply_markup=get_back_to_main_menu_keyboard())

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_added_quantity} –Ω–∞ —Å—É–º–º—É {total_sum:.2f} ‚ÇΩ", reply_markup=get_back_to_main_menu_keyboard())
        await show_cart(message)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º Excel
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    global categories_dict
    user_id = message.from_user.id

    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return

    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π‚Ä¶")

    cart_items = list(user_carts[user_id].items())
    product_ids = [str(pid) for pid, _ in cart_items]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏
    async def get_short_url(pid):
        product = products_by_id.get(pid, {})
        long_url = product.get('_URL_', '')
        return await shorten_url(long_url)

    short_urls = await asyncio.gather(*(get_short_url(pid) for pid in product_ids))

    rows = []
    for (product_id, product_info), short_url in zip(cart_items, short_urls):
        pid_str = str(product_id)
        product = products_by_id.get(pid_str, {})
        url = product.get('_URL_', '')
        link = short_url if short_url and short_url.startswith('http') else url

        category_id = product.get('_PARENT_ID_') or product.get('_CATEGORY_ID_')
        category_name = categories_dict.get(str(category_id), '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        logging.info(f"[DEBUG] –¢–æ–≤–∞—Ä {pid_str}: category_id={category_id}, category_name={category_name}")

        rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": pid_str,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": product_info.get('name', ''),
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
            "–°—Å—ã–ª–∫–∞": link,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": product_info.get('quantity', 0),
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": product_info.get('price', 0),
            "–°—É–º–º–∞": product_info.get('price', 0) * product_info.get('quantity', 0)
        })



    df = pd.DataFrame(rows)
    total_rows = len(df)
    num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
    logging.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_rows}, –ª–∏—Å—Ç–æ–≤: {num_sheets}")

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        for i in range(num_sheets):
            start = i * MAX_ROWS_PER_FILE
            end = min(start + MAX_ROWS_PER_FILE, total_rows)
            part_df = df.iloc[start:end]
            if part_df.empty:
                logging.info(f"–õ–∏—Å—Ç {i+1} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            sheet_name = f"–ö–æ—Ä–∑–∏–Ω–∞_{i+1}"
            part_df.to_excel(writer, index=False, sheet_name=sheet_name)
            worksheet = writer.sheets[sheet_name]
            worksheet.set_column('A:A', 20)  # –ê—Ä—Ç–∏–∫—É–ª
            worksheet.set_column('B:B', 40)  # –ù–∞–∑–≤–∞–Ω–∏–µ
            worksheet.set_column('C:C', 25)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            worksheet.set_column('D:D', 50)  # –°—Å—ã–ª–∫–∞
            worksheet.set_column('E:E', 15)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            worksheet.set_column('F:F', 15)  # –¶–µ–Ω–∞ –∑–∞ —à—Ç.
            worksheet.set_column('G:G', 15)  # –°—É–º–º–∞

    output.seek(0)
    file_name = "–ö–æ—Ä–∑–∏–Ω–∞_–≤—Å—è_—á–∞—Å—Ç—è–º–∏.xlsx"
    file = BufferedInputFile(output.read(), filename=file_name)

    await bot.send_document(chat_id=user_id, document=file, caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤)")

    total_sum = sum(row["–°—É–º–º–∞"] for row in rows)
    await message.answer(f"üõí –ò—Ç–æ–≥–æ: {total_sum:.2f} ‚ÇΩ", reply_markup=get_cart_keyboard())

  
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product_id, quantity_available_str = parts[1], parts[2]
    try:
        quantity_available = int(quantity_available_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    product = next((p for p in products if str(p['_ID_']) == product_id), None)
    if product:
        price = parse_price(product.get('_PRICE_', '0'))
        product_data = {
            'product_id': product_id,
            'quantity_available': quantity_available,
            'price': price,
            'name': product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        }
        await state.update_data(**product_data)
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å. {quantity_available} —à—Ç.):", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(OrderQuantity.waiting_for_quantity)
    else:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderQuantity.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')
    quantity_available = data.get('quantity_available')
    price = data.get('price')
    name = data.get('name')

    if product_id is None or quantity_available is None or price is None or name is None:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", 
                           reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
        return

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", 
                           reply_markup=get_back_to_main_menu_keyboard())
        return

    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {quantity_available}:",
                           reply_markup=get_back_to_main_menu_keyboard())
        return

    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}

    user_carts[user_id][product_id] = {
        'quantity': quantity,
        'price': price,
        'name': name
    }

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É/–º–µ–Ω—é
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=get_cart_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
    await state.set_state(UserStates.waiting_for_article_request)


@dp.message(F.text == "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
async def handle_cart_button(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", 
                           reply_markup=get_main_menu_keyboard())
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for product_id, item in user_carts[user_id].items():
        product_total = item['quantity'] * item['price']
        cart_text += f"‚ñ™ {item['name']}\n"
        cart_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} √ó {item['price']} ‚ÇΩ = {product_total} ‚ÇΩ\n\n"
        total += product_total
    
    cart_text += f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    
    await message.answer(
        cart_text,
        reply_markup=get_main_menu_keyboard()  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    )


@dp.message(F.text == "üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")
async def start_multiple_articles(message: types.Message, state: FSMContext):
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.\n\n"
        "–§–æ—Ä–º–∞—Ç: –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –∞—Ä—Ç–∏–∫—É–ª, –≤–æ –≤—Ç–æ—Ä–æ–º - –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤ —Ç—Ä–µ—Ç—å–µ–º - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
        reply_markup=get_back_to_main_menu_keyboard()
    )
    await state.set_state(MultipleArticlesStates.waiting_for_file)


@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É...", reply_markup=get_back_to_main_menu_keyboard())

    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)

        if df.shape[1] < 3:
            await message.answer("‚ùó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
            return

        rows = []
        total_sum = 0.0
        total_added_quantity = 0

        if user_id not in user_carts:
            user_carts[user_id] = {}

        for _, row in df.iterrows():
            try:
                sku = normalize_sku(str(row.iloc[0]))
                file_name = str(row.iloc[1]).strip() if not pd.isna(row.iloc[1]) else ''
                quantity_str = str(row.iloc[2]).strip()

                if not sku or not quantity_str.isdigit():
                    continue

                quantity = int(quantity_str)

                product = next((p for p in products if normalize_sku(p.get('_SKU_', '')) == sku), None)
                if product:
                    product_id = str(product.get('_ID_'))
                    price = parse_price(product.get('_PRICE_', '0'))
                    available = int(product.get('_QUANTITY_', 0))
                    name = file_name if file_name else product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                    quantity_to_add = min(quantity, available)

                    if product_id in user_carts[user_id]:
                        user_carts[user_id][product_id]['quantity'] += quantity_to_add
                    else:
                        user_carts[user_id][product_id] = {
                            'quantity': quantity_to_add,
                            'price': price,
                            'name': name
                        }

                    sum_price = price * quantity_to_add
                    total_sum += sum_price
                    total_added_quantity += quantity_to_add

                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": quantity_to_add,
                        "–¶–µ–Ω–∞": price,
                        "–î–æ—Å—Ç—É–ø–Ω–æ": available,
                        "–°—É–º–º–∞": sum_price,
                        "–°—Ç–∞—Ç—É—Å": "–î–æ–±–∞–≤–ª–µ–Ω–æ"
                    })
                else:
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": sku,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": file_name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": 0,
                        "–¶–µ–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–î–æ—Å—Ç—É–ø–Ω–æ": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–°—É–º–º–∞": 0,
                        "–°—Ç–∞—Ç—É—Å": "–ù–µ –Ω–∞–π–¥–µ–Ω"
                    })

            except Exception:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏")

        if not rows:
            await message.answer("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ –±–∞–∑—ã.", reply_markup=get_back_to_main_menu_keyboard())
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º Excel —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        df_result = pd.DataFrame(rows)
        total_rows = len(df_result)
        num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
        logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {total_rows}, –ª–∏—Å—Ç–æ–≤ –±—É–¥–µ—Ç: {num_sheets}")

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            for i in range(num_sheets):
                start = i * MAX_ROWS_PER_FILE
                end = min(start + MAX_ROWS_PER_FILE, total_rows)
                part_df = df_result.iloc[start:end]
                sheet_name = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{i+1}'
                part_df.to_excel(writer, index=False, sheet_name=sheet_name)
                worksheet = writer.sheets[sheet_name]
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:D', 18)
                worksheet.set_column('E:G', 15)
                worksheet.set_column('H:H', 15)

        output.seek(0)
        filename = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_–≤_–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö_–ª–∏—Å—Ç–∞—Ö.xlsx"
        doc = BufferedInputFile(output.read(), filename=filename)
        await bot.send_document(chat_id=user_id, document=doc, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({num_sheets} –ª–∏—Å—Ç–æ–≤)", reply_markup=get_back_to_main_menu_keyboard())

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_added_quantity} –Ω–∞ —Å—É–º–º—É {total_sum:.2f} ‚ÇΩ", reply_markup=get_back_to_main_menu_keyboard())
        await show_cart(message)  # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()


@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return

    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π‚Ä¶")

    cart_items = list(user_carts[user_id].items())
    product_ids = [str(pid) for pid, _ in cart_items]

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏
    async def get_short_url(pid):
        product = products_by_id.get(pid, {})
        long_url = product.get('_URL_', '')
        return await shorten_url(long_url)

    short_urls = await asyncio.gather(*(get_short_url(pid) for pid in product_ids))

    rows = []
    for (product_id, product_info), short_url in zip(cart_items, short_urls):
        pid_str = str(product_id)
        product = products_by_id.get(pid_str, {})  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã
        category = categories_dict.get(pid_str, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        price = product_info.get('price', 0)
        quantity = product_info.get('quantity', 0)
        name = product_info.get('name', '')

        logging.info(f"–¢–æ–≤–∞—Ä {pid_str} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {product.get('_URL_', '')}, —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {short_url}")

        # –î–∞–ª–µ–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": pid_str,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "–°—Å—ã–ª–∫–∞": short_url if short_url.startswith('http') else product.get('_URL_', ''),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": price,
            "–°—É–º–º–∞": price * quantity
        })


    df = pd.DataFrame(rows)
    total_rows = len(df)
    num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
    logging.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_rows}, –ª–∏—Å—Ç–æ–≤: {num_sheets}")

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        for i in range(num_sheets):
            start = i * MAX_ROWS_PER_FILE
            end = min(start + MAX_ROWS_PER_FILE, total_rows)
            part_df = df.iloc[start:end]
            if part_df.empty:
                logging.info(f"–õ–∏—Å—Ç {i+1} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            sheet_name = f"–ö–æ—Ä–∑–∏–Ω–∞_{i+1}"
            part_df.to_excel(writer, index=False, sheet_name=sheet_name)
            worksheet = writer.sheets[sheet_name]
            worksheet.set_column('A:A', 20)  # –ê—Ä—Ç–∏–∫—É–ª
            worksheet.set_column('B:B', 40)  # –ù–∞–∑–≤–∞–Ω–∏–µ
            worksheet.set_column('C:C', 25)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            worksheet.set_column('D:D', 50)  # –°—Å—ã–ª–∫–∞
            worksheet.set_column('E:E', 15)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            worksheet.set_column('F:F', 15)  # –¶–µ–Ω–∞ –∑–∞ —à—Ç.
            worksheet.set_column('G:G', 15)  # –°—É–º–º–∞

    output.seek(0)
    file_name = "–ö–æ—Ä–∑–∏–Ω–∞_–≤—Å—è_—á–∞—Å—Ç—è–º–∏.xlsx"
    file = BufferedInputFile(output.read(), filename=file_name)

    await bot.send_document(chat_id=message.chat.id, document=file, caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤)")

    total_sum = sum(row["–°—É–º–º–∞"] for row in rows)
    await message.answer(f"üõí –ò—Ç–æ–≥–æ: {total_sum:.2f} ‚ÇΩ", reply_markup=get_cart_keyboard())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
@dp.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_carts:
        user_carts[user_id].clear()
    await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_contact)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(OrderStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()
    if len(contact) < 5:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    await state.update_data(contact=contact)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞
@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    address = message.text.strip()
    data = await state.get_data()
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")
    user_id = message.from_user.id
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart_items = user_carts.get(user_id, {})
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    total_sum = sum(item['price'] * item['quantity'] for item in cart_items.values())
    order_data = {
        'user_id': user_id,
        'username': message.from_user.username or "–ë–µ–∑ username",
        'contact': contact,
        'address': address,
        'total_sum': total_sum,
        'items': list(cart_items.values()),
        'order_time': current_time
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
    excel_file = await generate_excel(order_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    await send_client_confirmation(message, order_data, excel_file)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await notify_order(order_data, excel_file)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_carts[user_id].clear()
    await state.clear()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞
async def generate_excel(order_data: dict) -> bytes:
    data = []
    for item in order_data['items']:
        data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": item['name'],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item['quantity'],
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": item['price'],
            "–°—É–º–º–∞": item['price'] * item['quantity']
        })
    
    df = pd.DataFrame(data)
    total_row = pd.DataFrame([{
        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò—Ç–æ–≥–æ",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "",
        "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": "",
        "–°—É–º–º–∞": order_data['total_sum']
    }])
    df = pd.concat([df, total_row], ignore_index=True)
    
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑', index=False)
        writer.close()
    output.seek(0)
    return output.read()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
async def send_client_confirmation(message: types.Message, order_data: dict, excel_file: bytes):
    order_summary = (
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {hd.quote(order_data['contact'])}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {hd.quote(order_data['address'])}\n\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order_data['total_sum']:.2f} ‚ÇΩ\n\n"
        "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
    )
    
    await message.answer(
        order_summary,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    
    await bot.send_document(
        chat_id=message.chat.id,
        document=types.BufferedInputFile(excel_file, filename="–ó–∞–∫–∞–∑.xlsx")
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            url=f"https://t.me/{ADMIN_USERNAME}"
        )]
    ])
    
    await message.answer(
        "üì¢ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        reply_markup=contact_keyboard
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_order(order_data: dict, excel_file: bytes):
    # –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–∫–∞–Ω–∞–ª–∞
    text = (
        "üö® <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['username']}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> <code>{hd.quote(order_data['contact'])}</code>\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {hd.quote(order_data['address'])}\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {order_data['total_sum']:.2f} ‚ÇΩ\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {hd.quote(order_data['order_time'])}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_id in admin_ids:
        try:
           await bot.send_document(
            chat_id=admin_id,
            document=types.BufferedInputFile(
                excel_file,
                filename=f"–ó–∞–∫–∞–∑_{order_data['user_id']}.xlsx"
            ),
            caption=text,  
            parse_mode="HTML"
        )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    if ORDER_CHANNEL:
        try:
            await bot.send_document(
            chat_id=ORDER_CHANNEL,
            document=types.BufferedInputFile(
                excel_file,
                filename=f"–ó–∞–∫–∞–∑_{order_data['user_id']}.xlsx"
            ),
            caption=text,  # –¢–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É
            parse_mode="HTML"
        )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
            await bot.send_message(
            admin_ids[0],
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)[:300]}"
        )



async def main():
    logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    await db.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot, skip_updates=True)
    except asyncio.CancelledError:
        logging.info("Polling –æ—Ç–º–µ–Ω—ë–Ω")
    finally:
        logging.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        await bot.session.close()
        await db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
