import asyncio
import logging
import re
import pandas as pd
import chardet
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import io

API_TOKEN = '7945899429:AAEvshSutPoVX5OaesH6FMUc24uOSfL1P8A'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_USERNAME = '@tutAdminnnIliZakazhik'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ Telegram username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class OrderQuantity(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class UploadStates(StatesGroup):
    waiting_for_categories = State()
    waiting_for_products = State()

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    waiting_for_multiple_articles_file = State()

class MultipleArticlesStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_quantity = State()

admin_ids = [6521061663]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID

categories = []
products = []

user_carts = {}  # {user_id: {product_id: {quantity, price, name}}}

def parse_price(price_str):
    try:
        price_clean = str(price_str).replace(' ', '').replace(',', '.')
        return float(price_clean)
    except:
        return 0.0

def normalize_sku(sku: str):
    return str(sku).replace('.', '').strip()

def format_product_info(product):
    return (
        f"üõ†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('_NAME_', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üîñ –ê—Ä—Ç–∏–∫—É–ª: {product.get('_SKU_', '–ù–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞')}\n"
        f"üí∞ –¶–µ–Ω–∞: {product.get('_PRICE_', '–ù–µ—Ç —Ü–µ–Ω—ã')} ‚ÇΩ\n"
        f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.get('_QUANTITY_', '0')} —à—Ç."
    )

def get_product_keyboard(product_id, quantity_available):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}_{quantity_available}"
        )]
    ])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"),
                KeyboardButton(text="–ó–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"),
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in admin_ids:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
                [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
                [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def load_categories(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.")
        await state.set_state(UploadStates.waiting_for_categories)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
async def load_products(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.")
        await state.set_state(UploadStates.waiting_for_products)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id in admin_ids:
        await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(UploadStates.waiting_for_categories, F.document)
async def process_categories_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global categories
        categories = df.to_dict('records')

        await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await state.clear()

@dp.message(UploadStates.waiting_for_products, F.document)
async def process_products_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global products
        products = df.to_dict('records')

        await message.answer(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await state.clear()

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞")
async def start_single_article(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(UserStates.waiting_for_article_request)

@dp.message(UserStates.waiting_for_article_request)
async def handle_article_request(message: types.Message, state: FSMContext):
    raw_query = message.text.strip()
    query_no_dots = raw_query.replace('.', '')

    product = next(
        (p for p in products if normalize_sku(p.get('_SKU_', '')) in [raw_query, query_no_dots]),
        None
    )

    if product:
        text = format_product_info(product)
        quantity_available = int(product.get('_QUANTITY_', 0))
        product_id = product.get('_ID_')
        await message.answer(text, reply_markup=get_product_keyboard(product_id, quantity_available))

        product_url = product.get('_URL_')
        if product_url:
            try:
                response = requests.get(product_url)
                response.raise_for_status()
                soup = BeautifulSoup(response.content, 'html.parser')

                img_tag = soup.select_one('.product-image img') or soup.select_one('.product-page img')

                if not img_tag:
                    img_tags = soup.find_all('img')
                    for tag in img_tags:
                        src = tag.get('src', '')
                        if query_no_dots in src or 'product' in src.lower():
                            img_tag = tag
                            break

                if img_tag and img_tag.get('src'):
                    img_url = img_tag['src']
                    if not img_url.startswith('http'):
                        img_url = urljoin(product_url, img_url)

                    caption = f"üñº –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:\n{product.get('_NAME_', '')}\nüîñ –ê—Ä—Ç–∏–∫—É–ª: {product.get('_SKU_', '')}"
                    await message.answer_photo(photo=img_url, caption=caption)
                else:
                    await message.answer("‚ö†Ô∏è –§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)[:50]}")
        else:
            await message.answer("‚ö†Ô∏è URL —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{raw_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product_id, quantity_available_str = parts[1], parts[2]
    try:
        quantity_available = int(quantity_available_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    product = next((p for p in products if str(p['_ID_']) == product_id), None)
    if product:
        price = parse_price(product.get('_PRICE_', '0'))
        product_data = {
            'product_id': product_id,
            'quantity_available': quantity_available,
            'price': price,
            'name': product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        }
        await state.update_data(**product_data)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å. {quantity_available} —à—Ç.):")
        await state.set_state(OrderQuantity.waiting_for_quantity)
    else:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderQuantity.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')
    quantity_available = data.get('quantity_available')
    price = data.get('price')
    name = data.get('name')

    if product_id is None or quantity_available is None or price is None or name is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {quantity_available}:")
        return

    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}

    user_carts[user_id][product_id] = {
        'quantity': quantity,
        'price': price,
        'name': name
    }
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    await state.clear()

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
async def start_multiple_articles(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (–æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –≤ —è—á–µ–π–∫–µ, –≤ –ª—é–±–æ–º —Å—Ç–æ–ª–±—Ü–µ):\n–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –∞—Ä—Ç–∏–∫—É–ª—ã, –∏–Ω–∞—á–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç")
    await state.set_state(MultipleArticlesStates.waiting_for_file)

@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    try:
        if not message.document.file_name.lower().endswith(('.xlsx', '.xls')):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")
            return

        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)
        skus_raw = df.values.flatten()
        skus = [normalize_sku(sku) for sku in skus_raw if str(sku).strip() != '']

        if not skus:
            await message.answer("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤.")
            await state.clear()
            return

        await state.update_data(skus=skus, index=0)
        await process_next_article(message.chat.id, state)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)[:100]}")
        await state.clear()

async def process_next_article(chat_id, state: FSMContext):
    data = await state.get_data()
    skus = data.get('skus', [])
    index = data.get('index', 0)

    if index >= len(skus):
        await bot.send_message(chat_id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã:")
        user_id = (await bot.get_chat(chat_id)).id
        await show_cart_by_user_id(user_id)
        await state.clear()
        return

    sku = skus[index]
    product = next((p for p in products if normalize_sku(p.get('_SKU_', '')) == sku), None)
    if product:
        text = format_product_info(product)
        await bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä {index + 1} –∏–∑ {len(skus)}:\n\n{text}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–º–∞–∫—Å. {product.get('_QUANTITY_', 0)}):")
        await state.update_data(current_product_id=product.get('_ID_'), current_quantity_available=int(product.get('_QUANTITY_', 0)))
        await state.set_state(MultipleArticlesStates.waiting_for_quantity)
    else:
        await bot.send_message(chat_id, f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{sku}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        await state.update_data(index=index + 1)
        await process_next_article(chat_id, state)

@dp.message(MultipleArticlesStates.waiting_for_quantity)
async def process_quantity_multiple(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('current_product_id')
    quantity_available = data.get('current_quantity_available')
    index = data.get('index', 0)
    skus = data.get('skus', [])

    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {quantity_available}.")
        return

    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}

    product = next((p for p in products if str(p['_ID_']) == str(product_id)), None)
    if not product:
        await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    price = parse_price(product.get('_PRICE_', '0'))
    name = product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

    if product_id in user_carts[user_id]:
        user_carts[user_id][product_id]['quantity'] += quantity
    else:
        user_carts[user_id][product_id] = {
            'quantity': quantity,
            'price': price,
            'name': name
        }

    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    await state.update_data(index=index + 1)
    await process_next_article(message.chat.id, state)

async def show_cart_by_user_id(user_id: int):
    if user_id not in user_carts or not user_carts[user_id]:
        await bot.send_message(user_id, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total = 0
    cart_text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"

    for product_id, item in user_carts[user_id].items():
        quantity = item['quantity']
        price = item['price']
        name = item['name']

        total += price * quantity
        cart_text += (
            f"üîñ {name}\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç.: {price} ‚ÇΩ\n"
            f"üí∞ –°—É–º–º–∞: {price * quantity} ‚ÇΩ\n\n"
        )

    cart_text += f"üíµ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:* {total} ‚ÇΩ\n\n"
    

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
    ])

    await bot.send_message(user_id, cart_text, reply_markup=kb, parse_mode="Markdown")

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    await show_cart_by_user_id(message.from_user.id)

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_carts:
        del user_carts[user_id]
    await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(OrderQuantity.waiting_for_contact)

@dp.message(OrderQuantity.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    raw_contact = message.text.strip()
    if not raw_contact.startswith('+'):
        raw_contact = '+' + raw_contact
    if not re.fullmatch(r'\+\d{7,15}', raw_contact):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 9123456789 –∏–ª–∏ +79123456789")
        return
    await state.update_data(contact=raw_contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await state.set_state(OrderQuantity.waiting_for_address)

@dp.message(OrderQuantity.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if len(address) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    order_text = (
        "üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
        "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
    )
    total = 0
    for product_id, item in user_carts.get(user_id, {}).items():
        quantity = item['quantity']
        price = item['price']
        name = item['name']
        total += price * quantity
        order_text += f"- {name} x{quantity} ({price} ‚ÇΩ)\n"
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    for admin_id in admin_ids:
        await bot.send_message(
            chat_id=admin_id,
            text=order_text,
            parse_mode="Markdown"
        )
    if user_id in user_carts:
        del user_carts[user_id]
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:\n{ADMIN_USERNAME}")
    await state.clear()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
